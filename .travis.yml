language: cpp
cache:
  timeout: 1000
  directories:
    - $HOME/vcpkg

matrix:
  include:

    - os: osx
      name: macOS
      osx_image: xcode11.4
      env:
        - additional_defines="-DBUILD_SHARED_LIBS=OFF"
        - USE_VCPKG=true
        - USE_CUDA=false
        - MATRIX_EVAL="brew install yasm && unset CC && unset CXX"
        - VCPKG_DEFINES="-DCMAKE_TOOLCHAIN_FILE=$HOME/vcpkg/scripts/buildsystems/vcpkg.cmake"


    - os: linux
      compiler: gcc
      dist: bionic
      name: ubuntu 18.04 - CUDA
      addons:
        apt:
          update: true
          packages:
            - yasm
      env:
        - additional_defines="-DBUILD_SHARED_LIBS=OFF"
        - USE_VCPKG=true
        - USE_CUDA=true
        - VCPKG_DEFINES="-DCMAKE_TOOLCHAIN_FILE=$HOME/vcpkg/scripts/buildsystems/vcpkg.cmake"
        - INSTALL_CUDA_VERSION="11.0"
        - CUDACXX=/usr/local/cuda-${INSTALL_CUDA_VERSION}/bin/nvcc
        - CUDA_PATH=/usr/local/cuda-${INSTALL_CUDA_VERSION}
        - CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-${INSTALL_CUDA_VERSION}
        - LD_LIBRARY_PATH="/usr/local/cuda-${INSTALL_CUDA_VERSION}/lib64:/usr/local/cuda-${INSTALL_CUDA_VERSION}/lib64/stubs:${LD_LIBRARY_PATH}"
        - MATRIX_EVAL="wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin && sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600 && sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub && sudo add-apt-repository \"deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /\" && sudo apt-get update && sudo apt-get -y install cuda && sudo ln -s /usr/local/cuda-${INSTALL_CUDA_VERSION}/lib64/stubs/libcuda.so /usr/local/cuda-${INSTALL_CUDA_VERSION}/lib64/stubs/libcuda.so.1"

    - os: linux
      compiler: gcc
      dist: bionic
      name: ubuntu 18.04
      addons:
        apt:
          update: true
          packages:
            - yasm
      env:
        - additional_defines="-DBUILD_SHARED_LIBS=OFF"
        - USE_VCPKG=true
        - USE_CUDA=false
        - VCPKG_DEFINES="-DCMAKE_TOOLCHAIN_FILE=$HOME/vcpkg/scripts/buildsystems/vcpkg.cmake"
        - MATRIX_EVAL=""

  allow_failures:
    - name: macOS

before_install:
  - travis_retry eval "${MATRIX_EVAL}"

install:
  # CMake upgrade on Linux
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]] ; then wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.tar.gz ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]] ; then tar -xzf cmake-3.17.2-Linux-x86_64.tar.gz ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]] ; then export PATH=$PWD/cmake-3.17.2-Linux-x86_64/bin:$PATH ; fi
  - pushd $HOME
  - if [ -d "$HOME/vcpkg/.git" ] ; then echo vcpkg cached ; else rm -rf vcpkg ; git clone https://github.com/Microsoft/vcpkg ; fi
  - cd vcpkg
  - git checkout .
  - git pull
  - if [ "${USE_VCPKG}" = true ] ; then ./bootstrap-vcpkg.sh ; fi
  - if [ "${USE_VCPKG}" = true ] ; then echo "set(VCPKG_BUILD_TYPE release)" >> triplets/x64-osx.cmake ; fi
  - if [ "${USE_VCPKG}" = true ] ; then echo "set(VCPKG_BUILD_TYPE release)" >> triplets/x64-linux.cmake ; fi
  - if [ "${USE_VCPKG}" = true ] ; then travis_wait 45 ./vcpkg upgrade --no-dry-run ; fi
  - if [ "${USE_VCPKG}" = true ] ; then travis_wait ./vcpkg install stb pthreads --recurse ; fi
  - if [ "${USE_VCPKG}" = true ] ; then if [ "${USE_CUDA}" = true ] ; then travis_wait ./vcpkg install cudnn --recurse ; fi ; fi
  - if [ "${USE_VCPKG}" = true ] ; then travis_wait 45 ./vcpkg install ffmpeg --recurse ; fi
  #- if [ "${USE_VCPKG}" = true ] && [[ ! -z "${CUDACXX}" ]] ; then travis_wait 45 ./vcpkg install opencv[ffmpeg,cuda] --recurse ; fi
  #- if [ "${USE_VCPKG}" = true ] && [[ -z "${CUDACXX}" ]] ; then travis_wait 45 ./vcpkg install opencv[ffmpeg] --recurse ; fi
  - if [ "${USE_VCPKG}" = true ] ; then travis_wait 45 ./vcpkg install opencv[ffmpeg] --recurse ; fi
  - if [ "${USE_VCPKG}" = true ] ; then rm -rf buildtrees ; fi
  - popd

before_script:
  - mkdir build_release
  - cd build_release
  - cmake .. -DCMAKE_BUILD_TYPE="Release" ${VCPKG_DEFINES} ${additional_defines}
  - cd ..

script:
  - cd build_release && cmake --build . --target install -- -j8 && cd ..

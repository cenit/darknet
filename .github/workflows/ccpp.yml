name: Darknet Continuous Integration

on:
  push:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  schedule:
    - cron: '0 11 * * *'

env:
  VCPKG_BINARY_SOURCES: 'clear;nuget,vcpkgbinarycache,readwrite'
  VCPKG_FORCE_DOWNLOADED_BINARIES: "TRUE"

jobs:
  ubuntu-vcpkg:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - uses: lukka/get-cmake@latest

    - name: Update apt
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt-get install -y --no-install-recommends yasm nasm gperf libgles2-mesa-dev libx11-dev libxft-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxdamage-dev libxinerama-dev libdbus-1-dev libxtst-dev
    - name: Clean downloads
      run: sudo apt-get clean

    - name: 'Install CUDA'
      run: ${{ github.workspace }}/scripts/deploy-cuda.sh

    - name: 'Create softlinks for CUDA'
      run: |
        source ${{ github.workspace }}/scripts/requested_cuda_version.sh
        sudo ln -s /usr/local/cuda-${CUDA_VERSION}/lib64/stubs/libcuda.so /usr/local/cuda-${CUDA_VERSION}/lib64/stubs/libcuda.so.1
        sudo ln -s /usr/local/cuda-${CUDA_VERSION}/lib64/stubs/libcuda.so /usr/local/cuda-${CUDA_VERSION}/lib64/libcuda.so.1
        sudo ln -s /usr/local/cuda-${CUDA_VERSION}/lib64/stubs/libcuda.so /usr/local/cuda-${CUDA_VERSION}/lib64/libcuda.so

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone --depth 1 https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json

    - name: Setup NuGet API key if found
      shell: bash
      env:
        BAGET_API_KEY: ${{ secrets.BAGET_API_KEY }}
      if: env.BAGET_API_KEY != null
      run: >
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      env:
        CUDACXX: "/usr/local/cuda/bin/nvcc"
        CUDA_PATH: "/usr/local/cuda"
        CUDA_TOOLKIT_ROOT_DIR: "/usr/local/cuda"
        LD_LIBRARY_PATH: "/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:$LD_LIBRARY_PATH"
      run: ${{ github.workspace }}/build.ps1 -UseVCPKG -DoNotUpdateVCPKG -EnableOPENCV -EnableCUDA -EnableCUDNN -DisableInteractive -DoNotUpdateTOOL -BuildInstaller

    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-cuda-${{ runner.os }}
        path: cfg
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-cuda-${{ runner.os }}
        path: data
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-cuda-${{ runner.os }}
        path: ${{ github.workspace }}/*dark*
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-cuda-${{ runner.os }}
        path: ${{ github.workspace }}/uselib*


  osx-vcpkg:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - name: Install dependencies
      run: brew install libomp yasm nasm pkg-config

    - uses: lukka/get-cmake@latest

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone --depth 1 https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json

    - name: Setup NuGet API key if found
      shell: bash
      env:
        BAGET_API_KEY: ${{ secrets.BAGET_API_KEY }}
      if: env.BAGET_API_KEY != null
      run: >
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      run: ${{ github.workspace }}/build.ps1 -UseVCPKG -DoNotUpdateVCPKG -EnableOPENCV -DisableInteractive -DoNotUpdateTOOL -BuildInstaller

    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: cfg
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: data
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/*dark*
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/uselib*


  win-vcpkg:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - uses: lukka/get-cmake@latest

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone --depth 1 https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json

    - name: Setup NuGet API key if found
      shell: bash
      env:
        BAGET_API_KEY: ${{ secrets.BAGET_API_KEY }}
      if: env.BAGET_API_KEY != null
      run: >
        $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      run: ${{ github.workspace }}/build.ps1 -UseVCPKG -ForceLocalVCPKG -DoNotUpdateVCPKG -EnableOPENCV -DisableInteractive -DoNotUpdateTOOL -BuildInstaller

    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: cfg
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: data
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/*dark*
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/build_release/*.dll
    - uses: actions/upload-artifact@v3
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/uselib*

name: Darknet Continuous Integration

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  VCPKG_BINARY_SOURCES: 'clear;nuget,vcpkgbinarycache,readwrite'

jobs:
  ubuntu-vcpkg-opencv4-cuda:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - uses: lukka/get-cmake@latest

    - name: Update apt
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt install yasm nasm

    - name: 'Install CUDA'
      run: ./scripts/deploy-cuda.sh

    - name: 'Create softlinks for CUDA'
      run: |
        sudo ln -s /usr/local/cuda-11.2/lib64/stubs/libcuda.so /usr/local/cuda-11.2/lib64/stubs/libcuda.so.1
        sudo ln -s /usr/local/cuda-11.2/lib64/stubs/libcuda.so /usr/local/cuda-11.2/lib64/libcuda.so.1
        sudo ln -s /usr/local/cuda-11.2/lib64/stubs/libcuda.so /usr/local/cuda-11.2/lib64/libcuda.so

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      env:
        CUDACXX: "/usr/local/cuda/bin/nvcc"
        CUDA_PATH: "/usr/local/cuda"
        CUDA_TOOLKIT_ROOT_DIR: "/usr/local/cuda"
        LD_LIBRARY_PATH: "/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:$LD_LIBRARY_PATH"
      run: ./build.ps1 -UseVCPKG -DoNotUpdateVCPKG -EnableOPENCV -EnableCUDA -EnableCUDNN -DisableInteractive -DoNotUpdateDARKNET

    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-cuda-${{ runner.os }}
        path: cfg
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-cuda-${{ runner.os }}
        path: data
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-cuda-${{ runner.os }}
        path: ${{ github.workspace }}/*dark*
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-cuda-${{ runner.os }}
        path: ${{ github.workspace }}/uselib*


  ubuntu-vcpkg-opencv3-cuda:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - uses: lukka/get-cmake@latest

    - name: Update apt
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt install yasm nasm

    - name: 'Install CUDA'
      run: ./scripts/deploy-cuda.sh

    - name: 'Create softlinks for CUDA'
      run: |
        sudo ln -s /usr/local/cuda-11.2/lib64/stubs/libcuda.so /usr/local/cuda-11.2/lib64/stubs/libcuda.so.1
        sudo ln -s /usr/local/cuda-11.2/lib64/stubs/libcuda.so /usr/local/cuda-11.2/lib64/libcuda.so.1
        sudo ln -s /usr/local/cuda-11.2/lib64/stubs/libcuda.so /usr/local/cuda-11.2/lib64/libcuda.so

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      env:
        CUDACXX: "/usr/local/cuda/bin/nvcc"
        CUDA_PATH: "/usr/local/cuda"
        CUDA_TOOLKIT_ROOT_DIR: "/usr/local/cuda"
        LD_LIBRARY_PATH: "/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:$LD_LIBRARY_PATH"
      run: ./build.ps1 -UseVCPKG -DoNotUpdateVCPKG -EnableOPENCV -EnableCUDA -EnableCUDNN -ForceOpenCVVersion 3 -DisableInteractive -DoNotUpdateDARKNET


  ubuntu-vcpkg-opencv2-cuda:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - uses: lukka/get-cmake@latest

    - name: Update apt
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt install yasm nasm

    - name: 'Install CUDA'
      run: ./scripts/deploy-cuda.sh

    - name: 'Create softlinks for CUDA'
      run: |
        sudo ln -s /usr/local/cuda-11.2/lib64/stubs/libcuda.so /usr/local/cuda-11.2/lib64/stubs/libcuda.so.1
        sudo ln -s /usr/local/cuda-11.2/lib64/stubs/libcuda.so /usr/local/cuda-11.2/lib64/libcuda.so.1
        sudo ln -s /usr/local/cuda-11.2/lib64/stubs/libcuda.so /usr/local/cuda-11.2/lib64/libcuda.so

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      env:
        CUDACXX: "/usr/local/cuda/bin/nvcc"
        CUDA_PATH: "/usr/local/cuda"
        CUDA_TOOLKIT_ROOT_DIR: "/usr/local/cuda"
        LD_LIBRARY_PATH: "/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:$LD_LIBRARY_PATH"
      run: ./build.ps1 -UseVCPKG -DoNotUpdateVCPKG -EnableOPENCV -EnableCUDA -EnableCUDNN -ForceOpenCVVersion 2 -DisableInteractive -DoNotUpdateDARKNET


  ubuntu:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Update apt
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt install libopencv-dev

    - uses: lukka/get-cmake@latest

    - name: 'Build'
      shell: pwsh
      env:
        CUDACXX: "/usr/local/cuda/bin/nvcc"
        CUDA_PATH: "/usr/local/cuda"
        CUDA_TOOLKIT_ROOT_DIR: "/usr/local/cuda"
        LD_LIBRARY_PATH: "/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:$LD_LIBRARY_PATH"
      run: ./build.ps1 -EnableOPENCV -DisableInteractive -DoNotUpdateDARKNET

    - uses: actions/upload-artifact@v2
      with:
        name: darknet-${{ runner.os }}
        path: cfg
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-${{ runner.os }}
        path: data
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-${{ runner.os }}
        path: ${{ github.workspace }}/*dark*
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-${{ runner.os }}
        path: ${{ github.workspace }}/uselib*


  ubuntu-setup-sh:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Setup'
      shell: bash
      run: ./scripts/setup.sh -InstallCUDA -BypassDRIVER


  osx-vcpkg:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: brew install libomp yasm nasm

    - uses: lukka/get-cmake@latest

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      run: ./build.ps1 -UseVCPKG -DoNotUpdateVCPKG -DisableInteractive -DoNotUpdateDARKNET

    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: cfg
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: data
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/*dark*
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/uselib*


  win-vcpkg:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - uses: lukka/get-cmake@latest

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json ;
        $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      run: ./build.ps1 -UseVCPKG -DoNotUpdateVCPKG -EnableOPENCV -DisableInteractive -DoNotUpdateDARKNET

    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: cfg
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: data
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/*dark*
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/build_release/*.dll
    - uses: actions/upload-artifact@v2
      with:
        name: darknet-vcpkg-${{ runner.os }}
        path: ${{ github.workspace }}/uselib*


  win-setup-ps1:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json ;
        $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Setup'
      shell: pwsh
      run: ./scripts/setup.ps1 -InstallCUDA

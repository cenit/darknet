name: Darknet Continuous Integration

on: [push, pull_request]

jobs:
  ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Update apt
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt install yasm

    - uses: lukka/get-cmake@latest

    - name: Restore from cache and run vcpkg
      env:
        vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_linux.diff
      uses: lukka/run-vcpkg@v3
      with:
        vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '8121b4ec3d6a11353daf7639ed9082a78e617a2e'
        appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}

    - name: 'Build with CMake and Ninja'
      uses: lukka/run-cmake@v2.5
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{ runner.workspace }}/buildDirectory'
        cmakeBuildType: 'Release'
        cmakeAppendedArgs: "-DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release"
        buildWithCMakeArgs: '--target install'


  ubuntu-cuda:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Update apt
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt install yasm

    - uses: lukka/get-cmake@latest

    - name: 'Install CUDA'
      env:
        CUDACXX: "/usr/local/cuda-11.0/bin/nvcc"
        CUDA_PATH: "/usr/local/cuda-11.0"
        CUDA_TOOLKIT_ROOT_DIR: "/usr/local/cuda-11.0"
        LD_LIBRARY_PATH: "/usr/local/cuda-11.0/lib64:/usr/local/cuda-11.0/lib64/stubs:$LD_LIBRARY_PATH"
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
        sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
        sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
        sudo add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
        sudo apt-get update
        sudo apt-get -y install cuda
        sudo ln -s /usr/local/cuda-11.0/lib64/stubs/libcuda.so /usr/local/cuda-11.0/lib64/stubs/libcuda.so.1

    - name: Restore from cache and run vcpkg
      env:
        vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_linux_cuda.diff
        CUDACXX: "/usr/local/cuda-11.0/bin/nvcc"
        CUDA_PATH: "/usr/local/cuda-11.0"
        CUDA_TOOLKIT_ROOT_DIR: "/usr/local/cuda-11.0"
        LD_LIBRARY_PATH: "/usr/local/cuda-11.0/lib64:/usr/local/cuda-11.0/lib64/stubs:$LD_LIBRARY_PATH"
      uses: lukka/run-vcpkg@v3
      with:
        vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '8121b4ec3d6a11353daf7639ed9082a78e617a2e'
        appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}

    - name: 'Build with CMake and Ninja'
      env:
        CUDACXX: "/usr/local/cuda-11.0/bin/nvcc"
        CUDA_PATH: "/usr/local/cuda-11.0"
        CUDA_TOOLKIT_ROOT_DIR: "/usr/local/cuda-11.0"
        LD_LIBRARY_PATH: "/usr/local/cuda-11.0/lib64:/usr/local/cuda-11.0/lib64/stubs:$LD_LIBRARY_PATH"
      uses: lukka/run-cmake@v2.5
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{ runner.workspace }}/buildDirectory'
        cmakeAppendedArgs: "-DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release"
        cmakeBuildType: 'Release'
        buildWithCMakeArgs: '--target install'


  macOS:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: brew install libomp yasm

    - uses: lukka/get-cmake@latest

    - name: Restore from cache and run vcpkg
      env:
        vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_osx.diff
      uses: lukka/run-vcpkg@v3
      with:
        vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '8121b4ec3d6a11353daf7639ed9082a78e617a2e'
        appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}

    - name: 'Build with CMake and Ninja'
      uses: lukka/run-cmake@v2.5
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{ runner.workspace }}/buildDirectory'
        cmakeBuildType: 'Release'
        cmakeAppendedArgs: "-DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release"
        buildWithCMakeArgs: '--target install'


  Windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - uses: lukka/get-cmake@latest

    - name: Restore from cache and run vcpkg
      env:
        vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_windows.diff
      uses: lukka/run-vcpkg@v3
      with:
        vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '8121b4ec3d6a11353daf7639ed9082a78e617a2e'
        appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}

    - name: 'Build with CMake and Ninja'
      uses: lukka/run-cmake@v2.5
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{ runner.workspace }}/buildDirectory'
        cmakeAppendedArgs: "-DCMAKE_BUILD_TYPE=Release"
        cmakeBuildType: 'Release'
        buildWithCMakeArgs: '--config Release --target install'


  Windows-cuda:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: 'Install CUDA'
      run: |
        choco install cuda --version=10.2.89.20191206 -y
        $env:ChocolateyInstall = Convert-Path "$((Get-Command choco).Path)\..\.."
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        refreshenv

    - uses: lukka/get-cmake@latest

    - name: Restore from cache and run vcpkg
      env:
        vcpkgResponseFile: ${{ github.workspace }}/cmake/vcpkg_windows_cuda.diff
        CUDA_PATH: "C:\\Program\ Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0"
        CUDA_PATH_V10_2: "C:\\Program\ Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0"
        CUDA_TOOLKIT_ROOT_DIR: "C:\\Program\ Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0"
        CUDACXX: "C:\\Program\ Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0\\bin\\nvcc.exe"
      uses: lukka/run-vcpkg@v3
      with:
        vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '8121b4ec3d6a11353daf7639ed9082a78e617a2e'
        appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}

    - name: 'Build with CMake and Ninja'
      env:
        CUDA_PATH: "C:\\Program\ Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0"
        CUDA_PATH_V10_2: "C:\\Program\ Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0"
        CUDA_TOOLKIT_ROOT_DIR: "C:\\Program\ Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0"
        CUDACXX: "C:\\Program\ Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0\\bin\\nvcc.exe"
      uses: lukka/run-cmake@v2.5
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{ runner.workspace }}/buildDirectory'
        cmakeAppendedArgs: "-DCMAKE_BUILD_TYPE=Release"
        cmakeBuildType: 'Release'
        buildWithCMakeArgs: '--config Release --target install'
